#!/usr/bin/env python3

from clang.cindex import Index, CursorKind, TokenKind, AccessSpecifier
from pprint import pprint
from parser import Parser
from cppdb import CPPDatabase
from cleanup import Cleanup
from htmlgen import HTMLGenerator
from pathlib import Path
import yaml

def get_diag_info(diag):
    return { 'severity' : diag.severity,
             'location' : diag.location,
             'spelling' : diag.spelling,
             'ranges' : diag.ranges,
             'fixits' : diag.fixits }

def main():
    from optparse import OptionParser, OptionGroup

    global opts

    parser = OptionParser("usage: %prog [options] {filename} [clang-args*]")
    parser.add_option("", "--dir", dest="dir",
                      help="Directory where source files are found",
                      metavar="DIR", type=str, default="." )
    parser.add_option("", "--db", dest="db",
                      help="Database to store documentation in",
                      metavar="DBFILE", type=str, default="cppdoc.db" )
    parser.disable_interspersed_args()
    (opts, args) = parser.parse_args()

    if len(args) == 0:
        parser.error( 'invalid number arguments' )

    index = Index.create()
    tu = index.parse(None, args)
    if not tu:
        parser.error( "unable to load input" )

    if len( tu.diagnostics ) > 0:
        pprint( [get_diag_info(d) for d in  tu.diagnostics] )

    parser = Parser( Path( opts.dir ).resolve() )
    parser.parse( tu.cursor )
    #pprint( parser.nodes, sort_dicts=False )

    cleanup = Cleanup()
    for n in parser.nodes:
        cleanup( n )

    cppinfo = parser.create_tree()

    #pprint( cppinfo, sort_dicts=False )

    cppdb = CPPDatabase( opts.db )
    cppdb.write( cppinfo )
    cppdb.close()

if __name__ == '__main__':
    main()

